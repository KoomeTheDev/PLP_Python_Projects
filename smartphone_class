# Base class
class Smartphone:
    def __init__(self, brand, model, storage):
        self.brand = brand
        self.model = model
        self.storage = storage  # in GB

    def call(self, number):
        print(f"{self.brand} {self.model} is calling {number}...")

    def info(self):
        print(f"Brand: {self.brand}, Model: {self.model}, Storage: {self.storage}GB")

# Child class with inheritance
class GamingPhone(Smartphone):
    def __init__(self, brand, model, storage, cooling_system):
        super().__init__(brand, model, storage)
        self.cooling_system = cooling_system

    def play_game(self, game_name):
        print(f"Playing '{game_name}' on {self.brand} {self.model} with {self.cooling_system} cooling.")

    # Encapsulation example â€” private attribute
    def __secret_feature(self):
        print("Activating high-performance gaming mode... ðŸš€")

    def activate_secret(self):
        self.__secret_feature()

# Creating objects
phone1 = Smartphone("Apple", "iPhone 15", 256)
phone2 = GamingPhone("Asus", "ROG Phone 8", 512, "Liquid Cooling")

phone1.info()
phone1.call("123-456-7890")

phone2.info()
phone2.play_game("Call of Duty Mobile")
phone2.activate_secret()
